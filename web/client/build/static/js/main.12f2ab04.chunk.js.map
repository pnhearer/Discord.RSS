{"version":3,"sources":["logo.svg","js/constants/action-types.js","js/actions/index-actions.js","js/components/Header.js","js/components/Dashboard.js","js/reducers/index-reducer.js","js/store/index-store.js","js/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","UPDATE_GUILD","TEST_ACTION","testAction","payload","type","connect","state","text","testVal","dispatch","modifyTestVar","content","props","react_default","a","createElement","Link","to","onClick","ComponentOne","ComponentTwo","ComponentThree","withRouter","ownProps","updateText","Switch","Route","exact","path","component","initialState","rootReducer","arguments","length","undefined","action","update","$set","guildRss","createStore","window","store","App","className","src","logo","alt","href","target","rel","components_Header","components_Dashboard","console","log","axios","post","channel","feed","then","res","catch","err","response","Component","Boolean","location","hostname","match","ReactDOM","render","es","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12f2ab04.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const UPDATE_GUILD = 'UPDATE_GUILD'\nexport const TEST_ACTION = 'TEST_ACTION'\n","import { TEST_ACTION } from '../constants/action-types.js'\r\n\r\nexport function testAction (payload) {\r\n  return { type: TEST_ACTION, payload }\r\n}\r\n","import { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { testAction } from '../actions/index-actions.js'\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import update from 'immutability-helper'\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    text: state.testVal\r\n  }\r\n}\r\n\r\nconst mapDispatchToDrops = dispatch => {\r\n  return {\r\n    modifyTestVar: content => dispatch(testAction(content))\r\n  }\r\n}\r\n\r\nconst Header = props => (\r\n  <div>\r\n    <h1>Header Component</h1>\r\n    <p><Link to='/'>Dashboard /</Link></p>\r\n    <p><Link to='/two'>Dashboard /two</Link></p>\r\n    <p><Link to='/unknown'>Dashboard /unknown</Link></p>\r\n    <button onClick={() => {\r\n      props.modifyTestVar(props.text + ' 1 ')\r\n    }}>Update Redux State</button>\r\n  </div>\r\n)\r\n\r\nHeader.propTypes = {\r\n  modifyTestVar: PropTypes.func,\r\n  text: PropTypes.string\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToDrops)(Header)\r\n","// Connect the router with Redux with withRouter, since by default Redux implements\r\n// shouldComponentUpdate and has no awareness of when router updates the state\r\nimport { Switch, Route, withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { testAction } from '../actions/index-actions.js'\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ComponentOne = () => {\r\n  return (<p>ComponentOne</p>)\r\n}\r\n\r\nconst ComponentTwo = () => {\r\n  return (<p>ComponentTwo</p>)\r\n}\r\n\r\nconst ComponentThree = () => {\r\n  return (<p>ComponentDefault</p>)\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return { text: state.testVal }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateText: text => dispatch(testAction(text))\r\n  }\r\n}\r\n\r\nconst Dashboard = props => (\r\n  <main>\r\n    <h1>Dashboard Component</h1>\r\n    <Switch>\r\n      <Route exact path='/' component={ComponentOne} />\r\n      <Route exact path='/two' component={ComponentTwo} />\r\n      <Route component={ComponentThree} />\r\n    </Switch>\r\n    <p>\r\n      Redux State Var:\r\n      <br />\r\n      {props.text}\r\n    </p>\r\n  </main>\r\n)\r\n\r\nDashboard.propTypes = {\r\n  text: PropTypes.string\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Dashboard))\r\n","import { UPDATE_GUILD, TEST_ACTION } from '../constants/action-types'\r\nimport update from 'immutability-helper'\r\n\r\nconst initialState = {\r\n  testVal: 'Initial State Value'\r\n}\r\n\r\n// Always use immutability-helper for updating nested objects like guildRss\r\n\r\nfunction rootReducer (state = initialState, action) {\r\n  if (action.type === TEST_ACTION) {\r\n    return update(state, { testVal: { $set: action.payload } })\r\n  } else if (action.type === UPDATE_GUILD) {\r\n    return update(state, { guildRss: { $set: action.payload } })\r\n  }\r\n  return state\r\n}\r\n\r\nexport default rootReducer\r\n","import { createStore } from 'redux'\r\nimport rootReducer from '../reducers/index-reducer.js'\r\n\r\nexport default createStore(rootReducer)\n","// Purely for testing redux\r\n\r\nimport store from './store/index-store.js'\r\nimport { testAction } from './actions/index-actions.js'\r\n\r\nwindow.store = store\r\nwindow.testAction = testAction\r\n","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport Header from './js/components/Header'\nimport Dashboard from './js/components/Dashboard'\nimport axios from 'axios'\nimport './js/index'\nimport './App.css'\n\nclass App extends Component {\n  render () {\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <img src={logo} className='App-logo' alt='logo' />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className='App-link'\n            href='https://reactjs.org'\n            target='_blank'\n            rel='noopener noreferrer'\n          >\n            Learn React\n          </a>\n          (Scroll Down for Other Components)\n        </header>\n        <Header />\n        <Dashboard />\n        <button onClick={() => {\n          console.log('clicked')\n          axios.post('/api/guilds/240535022820392961/feeds', { channel: '425698124028313601', feed: 'http://www.rt.com/rss' })\n            .then(res => {\n              console.log('res', res)\n            }).catch(err => {\n              console.log('err', err.response || err)\n            })\n        }}>fetch</button>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n// import index from './js/index.js'\nimport { Provider } from 'react-redux'\nimport store from './js/store/index-store.js'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <Route path='/' component={App} />\n    </BrowserRouter>\n  </Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}